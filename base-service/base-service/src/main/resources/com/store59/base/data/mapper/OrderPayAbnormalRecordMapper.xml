<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.store59.base.data.mapper.OrderPayAbnormalRecordMapper">
	<resultMap id="BaseResultMap"
		type="com.store59.base.common.model.OrderPayAbnormalRecord">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="order_type" property="orderType" jdbcType="TINYINT" />
		<result column="order_sn" property="orderSn" jdbcType="VARCHAR" />
		<result column="order_amount" property="orderAmount" jdbcType="DECIMAL" />
		<result column="uid" property="uid" jdbcType="BIGINT" />
		<result column="phone" property="phone" jdbcType="VARCHAR" />
		<result column="pay_type" property="payType" jdbcType="TINYINT" />
		<result column="pay_trade_no" property="payTradeNo" jdbcType="VARCHAR" />
		<result column="status" property="status" jdbcType="TINYINT" />
		<result column="pay_time" property="payTime" jdbcType="INTEGER" />
		<result column="handle_time" property="handleTime" jdbcType="INTEGER" />
		<result column="handler" property="handler" jdbcType="BIGINT" />
		<result column="source" property="source" jdbcType="VARCHAR" />
		<result column="extension" property="extension" jdbcType="VARCHAR" />
	</resultMap>

	<sql id="Base_Column_List">
		id, order_type, order_sn, order_amount, uid, phone, pay_type,
		pay_trade_no, status, pay_time, handle_time, handler, source, extension
	</sql>

	<select id="findById" parameterType="java.lang.Integer" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM 59_orderpayabnormalrecord
		WHERE id = #{id}
	</select>

	<insert id="insertSelective" useGeneratedKeys="true"
		keyProperty="id">
		insert into 59_orderpayabnormalrecord
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="orderType != null">
				order_type,
			</if>
			<if test="orderSn != null">
				order_sn,
			</if>
			<if test="orderAmount != null">
				order_amount,
			</if>
			<if test="uid != null">
				uid,
			</if>
			<if test="phone != null">
				phone,
			</if>
			<if test="payType != null">
				pay_type,
			</if>
			<if test="payTradeNo != null">
				pay_trade_no,
			</if>
			<if test="status != null">
				status,
			</if>
			<if test="payTime != null">
				pay_time,
			</if>
			<if test="handleTime != null">
				handle_time,
			</if>
			<if test="handler != null">
				handler,
			</if>
			<if test="source != null">
				source,
			</if>
			<if test="extension != null">
				extension,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="orderType != null">
				#{orderType,jdbcType=TINYINT},
			</if>
			<if test="orderSn != null">
				#{orderSn,jdbcType=VARCHAR},
			</if>
			<if test="orderAmount != null">
				#{orderAmount,jdbcType=DECIMAL},
			</if>
			<if test="uid != null">
				#{uid,jdbcType=BIGINT},
			</if>
			<if test="phone != null">
				#{phone,jdbcType=VARCHAR},
			</if>
			<if test="payType != null">
				#{payType,jdbcType=TINYINT},
			</if>
			<if test="payTradeNo != null">
				#{payTradeNo,jdbcType=VARCHAR},
			</if>
			<if test="status != null">
				#{status,jdbcType=TINYINT},
			</if>
			<if test="payTime != null">
				#{payTime,jdbcType=INTEGER},
			</if>
			<if test="handleTime != null">
				#{handleTime,jdbcType=INTEGER},
			</if>
			<if test="handler != null">
				#{handler,jdbcType=BIGINT},
			</if>
			<if test="source != null">
				#{source},
			</if>
			<if test="extension != null">
				#{extension},
			</if>
		</trim>
	</insert>

	<update id="updateOrderPayAbnormalRecord"
	parameterType="com.store59.base.common.model.OrderPayAbnormalRecord">
	UPDATE 59_orderpayabnormalrecord
	<set>
		<if test="orderType != null ">
			order_type = #{orderType},
		</if>
		<if test="orderAmount != null ">
			order_amount = #{orderAmount},
		</if>
		<if test="uid != null ">
			uid = #{uid},
		</if>
		<if test="phone != null ">
			phone = #{phone},
		</if>
		<if test="payType != null ">
			pay_type = #{payType},
		</if>
		<if test="payTradeNo != null ">
			pay_trade_no = #{payTradeNo},
		</if>
		<if test="status != null ">
			status = #{status},
		</if>
		<if test="payTime != null ">
			pay_time = #{payTime},
		</if>
		<if test="handleTime != null ">
			handle_time = #{handleTime},
		</if>
		<if test="handler != null ">
			handler = #{handler},
		</if>
	</set>
	<where>
	<if test="id != null and orderSn == null">
		AND id = #{id}
	</if>
	<if test="id == null and orderSn != null">
		AND order_sn = #{orderSn}
	</if>
	<if test="id != null and orderSn != null">
		AND id = #{id} AND order_sn = #{orderSn}
	</if>
</where>
</update>

	<select id="findByFilter" parameterType="com.store59.base.common.filter.OrderPayAbnormalRecordFilter" resultMap="BaseResultMap">
		SELECT 
		<include refid="Base_Column_List" />
		FROM 59_orderpayabnormalrecord
		<where>
			<if test="orderSns != null and orderSns.size() > 0">
				AND order_sn IN
				<foreach collection="orderSns" index="index" item="item" open="(" close=")" separator=",">
					#{item}
				</foreach>
			</if>
			<if test="orderType != null">
				AND order_type = #{orderType}
			</if>
			<if test="payTradeNo != null">
				AND pay_trade_no = #{payTradeNo}
			</if>
		</where>
	</select>
</mapper>
